//
//  Randoms.swift
//  RandomKit
//
//  The MIT License (MIT)
//
//  Copyright (c) 2015-2017 Nikolai Vazquez
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

/// A sequence of random values generated by a `RandomGenerator`.
///
/// - warning: An instance *should not* outlive its `RandomGenerator`.
///
/// - seealso: `LimitedRandoms`
public struct Randoms<Input, Output, RG: RandomGenerator>: IteratorProtocol, Sequence {

    /// A function that takes an `Input` and mutable `Generator` and returns an optional `Output`.
    public typealias Generate = (Input, inout RG) -> Output?

    /// A pointer to the `RandomGenerator`
    private let _randomGeneratorPointer: UnsafeMutablePointer<RG>

    /// The input value.
    public var input: Input

    /// The function that generates a random `Output`.
    public var generate: Generate

    /// Creates an instance with `input`, `randomGenerator`, and `generate`.
    public init(input: Input, randomGenerator: inout RG, generate: @escaping Generate) {
        _randomGeneratorPointer = UnsafeMutablePointer(&randomGenerator)
        self.input = input
        self.generate = generate
    }

    /// Advances to the next element and returns it, or `nil` if no next element
    /// exists. Once `nil` has been returned, all subsequent calls return `nil`.
    public mutating func next() -> Output? {
        return generate(input, &_randomGeneratorPointer.pointee)
    }

}

/// A sequence of a limited number of random values generated by a `RandomGenerator`.
///
/// - warning: An instance *should not* outlive its `RandomGenerator`.
///
/// - seealso: `Randoms`
public struct LimitedRandoms<Input, Output, Limit: Strideable & ExpressibleByIntegerLiteral, RG: RandomGenerator>: IteratorProtocol, Sequence {

    /// A function that takes an `Input` and mutable `Generator` and returns an optional `Output`.
    public typealias Generate = (Input, inout RG) -> Output?

    /// A pointer to the `RandomGenerator`
    private let _randomGeneratorPointer: UnsafeMutablePointer<RG>

    private var _iteration: Limit

    /// The input value.
    public var input: Input

    /// The limit value.
    public var limit: Limit

    /// The function that generates a random `Output`.
    public var generate: Generate

    /// Creates an instance with `input`, `randomGenerator`, and `generate`.
    public init(input: Input, limit: Limit, randomGenerator: inout RG, generate: @escaping Generate) {
        _randomGeneratorPointer = UnsafeMutablePointer(&randomGenerator)
        _iteration = 0
        self.input = input
        self.limit = limit
        self.generate = generate
    }

    /// Advances to the next element and returns it, or `nil` if no next element
    /// exists. Once `nil` has been returned, all subsequent calls return `nil`.
    public mutating func next() -> Output? {
        guard _iteration < limit else {
            return nil
        }
        _iteration = _iteration.advanced(by: 1)
        return generate(input, &_randomGeneratorPointer.pointee)
    }

}

extension LimitedRandoms where Limit: Integer {
    /// A value less than or equal to the number of elements in
    /// the sequence, calculated nondestructively.
    ///
    /// - Complexity: O(1)
    public var underestimatedCount: Int {
        return Int(limit.toIntMax())
    }
}

extension Random {

    private static func _generate<R: RandomGenerator>(_: (), randomGenerator: inout R) -> Self {
        return random(using: &randomGenerator)
    }

    /// Returns a sequence of random values using `randomGenerator`.
    public static func randoms<R: RandomGenerator>(using randomGenerator: inout R) -> Randoms<(), Self, R> {
        return Randoms(input: (), randomGenerator: &randomGenerator, generate: _generate)
    }

    /// Returns a sequence of random values limited by `limit` using `randomGenerator`.
    public static func randoms<R: RandomGenerator, L: Strideable & ExpressibleByIntegerLiteral>(limitedBy limit: L,
                               using randomGenerator: inout R) -> LimitedRandoms<(), Self, L, R> {
        return LimitedRandoms(input: (), limit: limit, randomGenerator: &randomGenerator, generate: _generate)
    }

}

extension RandomToValue {

    /// Returns a sequence of random values to `value` using `randomGenerator`.
    public static func randoms<R: RandomGenerator>(to value: Self, using randomGenerator: inout R) -> Randoms<Self, Self, R> {
        return Randoms(input: value, randomGenerator: &randomGenerator, generate: random)
    }

    /// Returns a sequence of random values limited by `limit` to `value` using `randomGenerator`.
    public static func randoms<R: RandomGenerator, L: Strideable & ExpressibleByIntegerLiteral>(limitedBy limit: L,
                               to value: Self,
                               using randomGenerator: inout R) -> LimitedRandoms<Self, Self, L, R> {
        return LimitedRandoms(input: value, limit: limit, randomGenerator: &randomGenerator, generate: random)
    }

}

extension RandomThroughValue {

    /// Returns a sequence of random values through `value` using `randomGenerator`.
    public static func randoms<R: RandomGenerator>(through value: Self, using randomGenerator: inout R) -> Randoms<Self, Self, R> {
        return Randoms(input: value, randomGenerator: &randomGenerator, generate: random)
    }

    /// Returns a sequence of random values limited by `limit` through `value` using `randomGenerator`.
    public static func randoms<R: RandomGenerator, L: Strideable & ExpressibleByIntegerLiteral>(limitedBy limit: L,
                               through value: Self,
                               using randomGenerator: inout R) -> LimitedRandoms<Self, Self, L, R> {
        return LimitedRandoms(input: value, limit: limit, randomGenerator: &randomGenerator, generate: random)
    }

}

extension RandomWithinRange {

    /// Returns a sequence of random values within `range` using `randomGenerator`.
    public static func randoms<R: RandomGenerator>(within range: Range<Self>, using randomGenerator: inout R) -> Randoms<Range<Self>, Self, R> {
        return Randoms(input: range, randomGenerator: &randomGenerator, generate: random)
    }

    /// Returns a sequence of random values limited by `limit` within `range` using `randomGenerator`.
    public static func randoms<R: RandomGenerator, L: Strideable & ExpressibleByIntegerLiteral>(limitedBy limit: L,
                               within range: Range<Self>,
                               using randomGenerator: inout R) -> LimitedRandoms<Range<Self>, Self, L, R> {
        return LimitedRandoms(input: range, limit: limit, randomGenerator: &randomGenerator, generate: random)
    }

}

extension RandomWithinClosedRange {

    /// Returns a sequence of random values within `closedRange` using `randomGenerator`.
    public static func randoms<R: RandomGenerator>(within closedRange: ClosedRange<Self>, using randomGenerator: inout R) -> Randoms<ClosedRange<Self>, Self, R> {
        return Randoms(input: closedRange, randomGenerator: &randomGenerator, generate: random)
    }

    /// Returns a sequence of random values limited by `limit` within `closedRange` using `randomGenerator`.
    public static func randoms<R: RandomGenerator, L: Strideable & ExpressibleByIntegerLiteral>(limitedBy limit: L,
                               within closedRange: ClosedRange<Self>,
                               using randomGenerator: inout R) -> LimitedRandoms<ClosedRange<Self>, Self, L, R> {
        return LimitedRandoms(input: closedRange, limit: limit, randomGenerator: &randomGenerator, generate: random)
    }

}

extension RandomWithMaxWidth {

    /// Returns a sequence of random values with a max width using `randomGenerator`.
    public static func randoms<R: RandomGenerator>(withMaxWidth width: Int, using randomGenerator: inout R) -> Randoms<Int, Self, R> {
        return Randoms(input: width, randomGenerator: &randomGenerator, generate: random)
    }

    /// Returns a sequence of random values limited by `limit` with a max width using `randomGenerator`.
    public static func randoms<R: RandomGenerator, L: Strideable & ExpressibleByIntegerLiteral>(limitedBy limit: L,
                               withMaxWidth width: Int,
                               using randomGenerator: inout R) -> LimitedRandoms<Int, Self, L, R> {
        return LimitedRandoms(input: width, limit: limit, randomGenerator: &randomGenerator, generate: random)
    }

}

extension RandomWithExactWidth {

    /// Returns a sequence of random values with an exact width using `randomGenerator`.
    public static func randoms<R: RandomGenerator>(withExactWidth width: Int, using randomGenerator: inout R) -> Randoms<Int, Self, R> {
        return Randoms(input: width, randomGenerator: &randomGenerator, generate: random)
    }

    /// Returns a sequence of random values limited by `limit` with an exact width using `randomGenerator`.
    public static func randoms<R: RandomGenerator, L: Strideable & ExpressibleByIntegerLiteral>(limitedBy limit: L,
                               withExactWidth width: Int,
                               using randomGenerator: inout R) -> LimitedRandoms<Int, Self, L, R> {
        return LimitedRandoms(input: width, limit: limit, randomGenerator: &randomGenerator, generate: random)
    }

}
